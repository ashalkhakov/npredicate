//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NSPredicate.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class NSPredicateParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, TRUE_PREDICATE=16, 
		FALSE_PREDICATE=17, AND=18, OR=19, NOT=20, EQUAL=21, NOT_EQUAL=22, LESS_THAN=23, 
		GREATER_THAN=24, LESS_THAN_OR_EQUAL=25, GREATER_THAN_OR_EQUAL=26, BETWEEN=27, 
		CONTAINS=28, IN=29, BEGINS_WITH=30, ENDS_WITH=31, LIKE=32, MATCHES=33, 
		ANY=34, ALL=35, NONE=36, SOME=37, NULL=38, TRUE=39, FALSE=40, SELF=41, 
		FIRST=42, LAST=43, SIZE=44, ASSIGN=45, STRING=46, DOUBLE_QUOTED_STRING=47, 
		SINGLE_QUOTED_STRING=48, FORMAT=49, NUMBER=50, IDENTIFIER=51, WS=52;
	public const int
		RULE_predicate = 0, RULE_comparison_predicate = 1, RULE_unqualified_comparison_predicate = 2, 
		RULE_operator = 3, RULE_operator_with_options = 4, RULE_operator_type = 5, 
		RULE_expression = 6, RULE_index = 7, RULE_value_expression = 8, RULE_expression_list = 9, 
		RULE_variable = 10;
	public static readonly string[] ruleNames = {
		"predicate", "comparison_predicate", "unqualified_comparison_predicate", 
		"operator", "operator_with_options", "operator_type", "expression", "index", 
		"value_expression", "expression_list", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'**'", "'*'", "'/'", "'+'", "'-'", 
		"'@'", "'.'", "'{'", "'}'", "','", "'$'", "'TRUEPREDICATE'", "'FALSEPREDICATE'", 
		null, null, null, null, null, "'<'", "'>'", "'<='", "'>='", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "':='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "TRUE_PREDICATE", "FALSE_PREDICATE", "AND", "OR", 
		"NOT", "EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN_OR_EQUAL", "BETWEEN", "CONTAINS", "IN", "BEGINS_WITH", "ENDS_WITH", 
		"LIKE", "MATCHES", "ANY", "ALL", "NONE", "SOME", "NULL", "TRUE", "FALSE", 
		"SELF", "FIRST", "LAST", "SIZE", "ASSIGN", "STRING", "DOUBLE_QUOTED_STRING", 
		"SINGLE_QUOTED_STRING", "FORMAT", "NUMBER", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NSPredicate.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public NSPredicateParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateNotContext : PredicateContext {
		public ITerminalNode NOT() { return GetToken(NSPredicateParser.NOT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateNotContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateNot(this);
		}
	}
	public partial class PredicateTrueContext : PredicateContext {
		public ITerminalNode TRUE_PREDICATE() { return GetToken(NSPredicateParser.TRUE_PREDICATE, 0); }
		public PredicateTrueContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateTrue(this);
		}
	}
	public partial class PredicateComparisonContext : PredicateContext {
		public Comparison_predicateContext comparison_predicate() {
			return GetRuleContext<Comparison_predicateContext>(0);
		}
		public PredicateComparisonContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateComparison(this);
		}
	}
	public partial class PredicateOrContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode OR() { return GetToken(NSPredicateParser.OR, 0); }
		public PredicateOrContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateOr(this);
		}
	}
	public partial class PredicateParensContext : PredicateContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateParensContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateParens(this);
		}
	}
	public partial class PredicateFalseContext : PredicateContext {
		public ITerminalNode FALSE_PREDICATE() { return GetToken(NSPredicateParser.FALSE_PREDICATE, 0); }
		public PredicateFalseContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateFalse(this);
		}
	}
	public partial class PredicateAndContext : PredicateContext {
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode AND() { return GetToken(NSPredicateParser.AND, 0); }
		public PredicateAndContext(PredicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterPredicateAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitPredicateAnd(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_predicate, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new PredicateNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 23; Match(NOT);
				State = 24; predicate(4);
				}
				break;
			case 2:
				{
				_localctx = new PredicateComparisonContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 25; comparison_predicate();
				}
				break;
			case 3:
				{
				_localctx = new PredicateTrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; Match(TRUE_PREDICATE);
				}
				break;
			case 4:
				{
				_localctx = new PredicateFalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27; Match(FALSE_PREDICATE);
				}
				break;
			case 5:
				{
				_localctx = new PredicateParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; Match(T__0);
				State = 29; predicate(0);
				State = 30; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 42;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 40;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new PredicateAndContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 34;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 35; Match(AND);
						State = 36; predicate(7);
						}
						break;
					case 2:
						{
						_localctx = new PredicateOrContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 37;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 38; Match(OR);
						State = 39; predicate(6);
						}
						break;
					}
					} 
				}
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_predicateContext : ParserRuleContext {
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_predicate; } }
	 
		public Comparison_predicateContext() { }
		public virtual void CopyFrom(Comparison_predicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonPredicateSomeContext : Comparison_predicateContext {
		public ITerminalNode SOME() { return GetToken(NSPredicateParser.SOME, 0); }
		public Unqualified_comparison_predicateContext unqualified_comparison_predicate() {
			return GetRuleContext<Unqualified_comparison_predicateContext>(0);
		}
		public ComparisonPredicateSomeContext(Comparison_predicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterComparisonPredicateSome(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitComparisonPredicateSome(this);
		}
	}
	public partial class ComparisonPredicateAnyContext : Comparison_predicateContext {
		public ITerminalNode ANY() { return GetToken(NSPredicateParser.ANY, 0); }
		public Unqualified_comparison_predicateContext unqualified_comparison_predicate() {
			return GetRuleContext<Unqualified_comparison_predicateContext>(0);
		}
		public ComparisonPredicateAnyContext(Comparison_predicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterComparisonPredicateAny(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitComparisonPredicateAny(this);
		}
	}
	public partial class ComparisonPredicateNoneContext : Comparison_predicateContext {
		public ITerminalNode NONE() { return GetToken(NSPredicateParser.NONE, 0); }
		public Unqualified_comparison_predicateContext unqualified_comparison_predicate() {
			return GetRuleContext<Unqualified_comparison_predicateContext>(0);
		}
		public ComparisonPredicateNoneContext(Comparison_predicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterComparisonPredicateNone(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitComparisonPredicateNone(this);
		}
	}
	public partial class ComparisonPredicateUnqualifiedContext : Comparison_predicateContext {
		public Unqualified_comparison_predicateContext unqualified_comparison_predicate() {
			return GetRuleContext<Unqualified_comparison_predicateContext>(0);
		}
		public ComparisonPredicateUnqualifiedContext(Comparison_predicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterComparisonPredicateUnqualified(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitComparisonPredicateUnqualified(this);
		}
	}
	public partial class ComparisonPredicateAllContext : Comparison_predicateContext {
		public ITerminalNode ALL() { return GetToken(NSPredicateParser.ALL, 0); }
		public Unqualified_comparison_predicateContext unqualified_comparison_predicate() {
			return GetRuleContext<Unqualified_comparison_predicateContext>(0);
		}
		public ComparisonPredicateAllContext(Comparison_predicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterComparisonPredicateAll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitComparisonPredicateAll(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_predicateContext comparison_predicate() {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(Context, State);
		EnterRule(_localctx, 2, RULE_comparison_predicate);
		try {
			State = 54;
			switch (TokenStream.La(1)) {
			case T__0:
			case T__8:
			case T__9:
			case T__11:
			case T__14:
			case NULL:
			case TRUE:
			case FALSE:
			case SELF:
			case STRING:
			case FORMAT:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new ComparisonPredicateUnqualifiedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; unqualified_comparison_predicate();
				}
				break;
			case ANY:
				_localctx = new ComparisonPredicateAnyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; Match(ANY);
				State = 47; unqualified_comparison_predicate();
				}
				break;
			case SOME:
				_localctx = new ComparisonPredicateSomeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 48; Match(SOME);
				State = 49; unqualified_comparison_predicate();
				}
				break;
			case ALL:
				_localctx = new ComparisonPredicateAllContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; Match(ALL);
				State = 51; unqualified_comparison_predicate();
				}
				break;
			case NONE:
				_localctx = new ComparisonPredicateNoneContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 52; Match(NONE);
				State = 53; unqualified_comparison_predicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unqualified_comparison_predicateContext : ParserRuleContext {
		public Unqualified_comparison_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualified_comparison_predicate; } }
	 
		public Unqualified_comparison_predicateContext() { }
		public virtual void CopyFrom(Unqualified_comparison_predicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnqualifiedComparisonPredicateContext : Unqualified_comparison_predicateContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public UnqualifiedComparisonPredicateContext(Unqualified_comparison_predicateContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterUnqualifiedComparisonPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitUnqualifiedComparisonPredicate(this);
		}
	}

	[RuleVersion(0)]
	public Unqualified_comparison_predicateContext unqualified_comparison_predicate() {
		Unqualified_comparison_predicateContext _localctx = new Unqualified_comparison_predicateContext(Context, State);
		EnterRule(_localctx, 4, RULE_unqualified_comparison_predicate);
		try {
			_localctx = new UnqualifiedComparisonPredicateContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; expression(0);
			State = 57; @operator();
			State = 58; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
	 
		public OperatorContext() { }
		public virtual void CopyFrom(OperatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorOptionsContext : OperatorContext {
		public Operator_with_optionsContext operator_with_options() {
			return GetRuleContext<Operator_with_optionsContext>(0);
		}
		public OperatorOptionsContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOperatorOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOperatorOptions(this);
		}
	}
	public partial class OperatorBetweenContext : OperatorContext {
		public ITerminalNode BETWEEN() { return GetToken(NSPredicateParser.BETWEEN, 0); }
		public OperatorBetweenContext(OperatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOperatorBetween(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOperatorBetween(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_operator);
		try {
			State = 62;
			switch (TokenStream.La(1)) {
			case BETWEEN:
				_localctx = new OperatorBetweenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; Match(BETWEEN);
				}
				break;
			case EQUAL:
			case NOT_EQUAL:
			case LESS_THAN:
			case GREATER_THAN:
			case LESS_THAN_OR_EQUAL:
			case GREATER_THAN_OR_EQUAL:
			case CONTAINS:
			case IN:
			case BEGINS_WITH:
			case ENDS_WITH:
			case LIKE:
			case MATCHES:
				_localctx = new OperatorOptionsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; operator_with_options();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_optionsContext : ParserRuleContext {
		public Operator_with_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_options; } }
	 
		public Operator_with_optionsContext() { }
		public virtual void CopyFrom(Operator_with_optionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OperatorOptionsBareContext : Operator_with_optionsContext {
		public Operator_typeContext operator_type() {
			return GetRuleContext<Operator_typeContext>(0);
		}
		public OperatorOptionsBareContext(Operator_with_optionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOperatorOptionsBare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOperatorOptionsBare(this);
		}
	}
	public partial class OperatorOptionsSpecifiedContext : Operator_with_optionsContext {
		public Operator_typeContext operator_type() {
			return GetRuleContext<Operator_typeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NSPredicateParser.IDENTIFIER, 0); }
		public OperatorOptionsSpecifiedContext(Operator_with_optionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOperatorOptionsSpecified(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOperatorOptionsSpecified(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_optionsContext operator_with_options() {
		Operator_with_optionsContext _localctx = new Operator_with_optionsContext(Context, State);
		EnterRule(_localctx, 8, RULE_operator_with_options);
		try {
			State = 70;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new OperatorOptionsBareContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; operator_type();
				}
				break;
			case 2:
				_localctx = new OperatorOptionsSpecifiedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; operator_type();
				State = 66; Match(T__2);
				State = 67; Match(IDENTIFIER);
				State = 68; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_typeContext : ParserRuleContext {
		public Operator_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_type; } }
	 
		public Operator_typeContext() { }
		public virtual void CopyFrom(Operator_typeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpContainsContext : Operator_typeContext {
		public ITerminalNode CONTAINS() { return GetToken(NSPredicateParser.CONTAINS, 0); }
		public OpContainsContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpContains(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpContains(this);
		}
	}
	public partial class OpInContext : Operator_typeContext {
		public ITerminalNode IN() { return GetToken(NSPredicateParser.IN, 0); }
		public OpInContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpIn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpIn(this);
		}
	}
	public partial class OpEndsWithContext : Operator_typeContext {
		public ITerminalNode ENDS_WITH() { return GetToken(NSPredicateParser.ENDS_WITH, 0); }
		public OpEndsWithContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpEndsWith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpEndsWith(this);
		}
	}
	public partial class OpLikeContext : Operator_typeContext {
		public ITerminalNode LIKE() { return GetToken(NSPredicateParser.LIKE, 0); }
		public OpLikeContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpLike(this);
		}
	}
	public partial class OpLessThanOrEqualToContext : Operator_typeContext {
		public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(NSPredicateParser.LESS_THAN_OR_EQUAL, 0); }
		public OpLessThanOrEqualToContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpLessThanOrEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpLessThanOrEqualTo(this);
		}
	}
	public partial class OpNotEqualToContext : Operator_typeContext {
		public ITerminalNode NOT_EQUAL() { return GetToken(NSPredicateParser.NOT_EQUAL, 0); }
		public OpNotEqualToContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpNotEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpNotEqualTo(this);
		}
	}
	public partial class OpBeginsWithContext : Operator_typeContext {
		public ITerminalNode BEGINS_WITH() { return GetToken(NSPredicateParser.BEGINS_WITH, 0); }
		public OpBeginsWithContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpBeginsWith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpBeginsWith(this);
		}
	}
	public partial class OpLessThanContext : Operator_typeContext {
		public ITerminalNode LESS_THAN() { return GetToken(NSPredicateParser.LESS_THAN, 0); }
		public OpLessThanContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpLessThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpLessThan(this);
		}
	}
	public partial class OpMatchesContext : Operator_typeContext {
		public ITerminalNode MATCHES() { return GetToken(NSPredicateParser.MATCHES, 0); }
		public OpMatchesContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpMatches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpMatches(this);
		}
	}
	public partial class OpGreaterThanOrEqualToContext : Operator_typeContext {
		public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(NSPredicateParser.GREATER_THAN_OR_EQUAL, 0); }
		public OpGreaterThanOrEqualToContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpGreaterThanOrEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpGreaterThanOrEqualTo(this);
		}
	}
	public partial class OpEqualToContext : Operator_typeContext {
		public ITerminalNode EQUAL() { return GetToken(NSPredicateParser.EQUAL, 0); }
		public OpEqualToContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpEqualTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpEqualTo(this);
		}
	}
	public partial class OpGreaterThanContext : Operator_typeContext {
		public ITerminalNode GREATER_THAN() { return GetToken(NSPredicateParser.GREATER_THAN, 0); }
		public OpGreaterThanContext(Operator_typeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterOpGreaterThan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitOpGreaterThan(this);
		}
	}

	[RuleVersion(0)]
	public Operator_typeContext operator_type() {
		Operator_typeContext _localctx = new Operator_typeContext(Context, State);
		EnterRule(_localctx, 10, RULE_operator_type);
		try {
			State = 84;
			switch (TokenStream.La(1)) {
			case EQUAL:
				_localctx = new OpEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(EQUAL);
				}
				break;
			case NOT_EQUAL:
				_localctx = new OpNotEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; Match(NOT_EQUAL);
				}
				break;
			case LESS_THAN:
				_localctx = new OpLessThanContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 74; Match(LESS_THAN);
				}
				break;
			case GREATER_THAN:
				_localctx = new OpGreaterThanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 75; Match(GREATER_THAN);
				}
				break;
			case LESS_THAN_OR_EQUAL:
				_localctx = new OpLessThanOrEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 76; Match(LESS_THAN_OR_EQUAL);
				}
				break;
			case GREATER_THAN_OR_EQUAL:
				_localctx = new OpGreaterThanOrEqualToContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 77; Match(GREATER_THAN_OR_EQUAL);
				}
				break;
			case CONTAINS:
				_localctx = new OpContainsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 78; Match(CONTAINS);
				}
				break;
			case IN:
				_localctx = new OpInContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 79; Match(IN);
				}
				break;
			case BEGINS_WITH:
				_localctx = new OpBeginsWithContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 80; Match(BEGINS_WITH);
				}
				break;
			case ENDS_WITH:
				_localctx = new OpEndsWithContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 81; Match(ENDS_WITH);
				}
				break;
			case LIKE:
				_localctx = new OpLikeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 82; Match(LIKE);
				}
				break;
			case MATCHES:
				_localctx = new OpMatchesContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 83; Match(MATCHES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprMultContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprMultContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprMult(this);
		}
	}
	public partial class ExprIndexContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public ExprIndexContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprIndex(this);
		}
	}
	public partial class ExprParensContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprParens(this);
		}
	}
	public partial class ExprConstantContext : ExpressionContext {
		public Value_expressionContext value_expression() {
			return GetRuleContext<Value_expressionContext>(0);
		}
		public ExprConstantContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprConstant(this);
		}
	}
	public partial class ExprPowerContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprPowerContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprPower(this);
		}
	}
	public partial class ExprNoArgFunctionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NSPredicateParser.IDENTIFIER, 0); }
		public ExprNoArgFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprNoArgFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprNoArgFunction(this);
		}
	}
	public partial class ExprDivContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprDivContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprDiv(this);
		}
	}
	public partial class ExprKeypathBinaryExpressionsContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprKeypathBinaryExpressionsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprKeypathBinaryExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprKeypathBinaryExpressions(this);
		}
	}
	public partial class ExprKeypathIdentifierContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NSPredicateParser.IDENTIFIER, 0); }
		public ExprKeypathIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprKeypathIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprKeypathIdentifier(this);
		}
	}
	public partial class ExprArgFunctionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NSPredicateParser.IDENTIFIER, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ExprArgFunctionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprArgFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprArgFunction(this);
		}
	}
	public partial class ExprKeypathAtIdentifierContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NSPredicateParser.IDENTIFIER, 0); }
		public ExprKeypathAtIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprKeypathAtIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprKeypathAtIdentifier(this);
		}
	}
	public partial class ExprSubContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprSub(this);
		}
	}
	public partial class ExprAssignContext : ExpressionContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NSPredicateParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAssignContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprAssign(this);
		}
	}
	public partial class ExprUnaryMinusContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprUnaryMinusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprUnaryMinus(this);
		}
	}
	public partial class ExprAddContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprAddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprAdd(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new ExprUnaryMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 87; Match(T__8);
				State = 88; expression(10);
				}
				break;
			case 2:
				{
				_localctx = new ExprAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89; variable();
				State = 90; Match(ASSIGN);
				State = 91; expression(6);
				}
				break;
			case 3:
				{
				_localctx = new ExprNoArgFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(IDENTIFIER);
				State = 94; Match(T__0);
				State = 95; Match(T__1);
				}
				break;
			case 4:
				{
				_localctx = new ExprArgFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96; Match(IDENTIFIER);
				State = 97; Match(T__0);
				State = 98; expression_list(0);
				State = 99; Match(T__1);
				}
				break;
			case 5:
				{
				_localctx = new ExprKeypathIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(IDENTIFIER);
				}
				break;
			case 6:
				{
				_localctx = new ExprKeypathAtIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; Match(T__9);
				State = 103; Match(IDENTIFIER);
				}
				break;
			case 7:
				{
				_localctx = new ExprConstantContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; value_expression();
				}
				break;
			case 8:
				{
				_localctx = new ExprParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105; Match(T__0);
				State = 106; expression(0);
				State = 107; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 134;
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExprPowerContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 111;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 112; Match(T__4);
						State = 113; expression(16);
						}
						break;
					case 2:
						{
						_localctx = new ExprMultContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 115; Match(T__5);
						State = 116; expression(15);
						}
						break;
					case 3:
						{
						_localctx = new ExprDivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 117;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 118; Match(T__6);
						State = 119; expression(14);
						}
						break;
					case 4:
						{
						_localctx = new ExprAddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 120;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 121; Match(T__7);
						State = 122; expression(13);
						}
						break;
					case 5:
						{
						_localctx = new ExprSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 124; Match(T__8);
						State = 125; expression(12);
						}
						break;
					case 6:
						{
						_localctx = new ExprKeypathBinaryExpressionsContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 127; Match(T__10);
						State = 128; expression(4);
						}
						break;
					case 7:
						{
						_localctx = new ExprIndexContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 130; Match(T__2);
						State = 131; index();
						State = 132; Match(T__3);
						}
						break;
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
	 
		public IndexContext() { }
		public virtual void CopyFrom(IndexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexLastContext : IndexContext {
		public ITerminalNode LAST() { return GetToken(NSPredicateParser.LAST, 0); }
		public IndexLastContext(IndexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterIndexLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitIndexLast(this);
		}
	}
	public partial class IndexFirstContext : IndexContext {
		public ITerminalNode FIRST() { return GetToken(NSPredicateParser.FIRST, 0); }
		public IndexFirstContext(IndexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterIndexFirst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitIndexFirst(this);
		}
	}
	public partial class IndexSizeContext : IndexContext {
		public ITerminalNode SIZE() { return GetToken(NSPredicateParser.SIZE, 0); }
		public IndexSizeContext(IndexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterIndexSize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitIndexSize(this);
		}
	}
	public partial class IndexExprContext : IndexContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexExprContext(IndexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 14, RULE_index);
		try {
			State = 143;
			switch (TokenStream.La(1)) {
			case T__0:
			case T__8:
			case T__9:
			case T__11:
			case T__14:
			case NULL:
			case TRUE:
			case FALSE:
			case SELF:
			case STRING:
			case FORMAT:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new IndexExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; expression(0);
				}
				break;
			case FIRST:
				_localctx = new IndexFirstContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; Match(FIRST);
				}
				break;
			case LAST:
				_localctx = new IndexLastContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; Match(LAST);
				}
				break;
			case SIZE:
				_localctx = new IndexSizeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 142; Match(SIZE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_expressionContext : ParserRuleContext {
		public Value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expression; } }
	 
		public Value_expressionContext() { }
		public virtual void CopyFrom(Value_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueSelfContext : Value_expressionContext {
		public ITerminalNode SELF() { return GetToken(NSPredicateParser.SELF, 0); }
		public ValueSelfContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueSelf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueSelf(this);
		}
	}
	public partial class ValueTrueContext : Value_expressionContext {
		public ITerminalNode TRUE() { return GetToken(NSPredicateParser.TRUE, 0); }
		public ValueTrueContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
	}
	public partial class ValueFalseContext : Value_expressionContext {
		public ITerminalNode FALSE() { return GetToken(NSPredicateParser.FALSE, 0); }
		public ValueFalseContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
	}
	public partial class ValueFormatContext : Value_expressionContext {
		public ITerminalNode FORMAT() { return GetToken(NSPredicateParser.FORMAT, 0); }
		public ValueFormatContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueFormat(this);
		}
	}
	public partial class ValueVariableContext : Value_expressionContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVariableContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueVariable(this);
		}
	}
	public partial class ValueNullContext : Value_expressionContext {
		public ITerminalNode NULL() { return GetToken(NSPredicateParser.NULL, 0); }
		public ValueNullContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueNull(this);
		}
	}
	public partial class ValueAggregateContext : Value_expressionContext {
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ValueAggregateContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueAggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueAggregate(this);
		}
	}
	public partial class ValueNumberContext : Value_expressionContext {
		public ITerminalNode NUMBER() { return GetToken(NSPredicateParser.NUMBER, 0); }
		public ValueNumberContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
	}
	public partial class ValueStringContext : Value_expressionContext {
		public ITerminalNode STRING() { return GetToken(NSPredicateParser.STRING, 0); }
		public ValueStringContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
	}
	public partial class ValueEmptyAggregateContext : Value_expressionContext {
		public ValueEmptyAggregateContext(Value_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterValueEmptyAggregate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitValueEmptyAggregate(this);
		}
	}

	[RuleVersion(0)]
	public Value_expressionContext value_expression() {
		Value_expressionContext _localctx = new Value_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_value_expression);
		try {
			State = 159;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(STRING);
				}
				break;
			case 2:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; Match(NUMBER);
				}
				break;
			case 3:
				_localctx = new ValueFormatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; Match(FORMAT);
				}
				break;
			case 4:
				_localctx = new ValueVariableContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 148; variable();
				}
				break;
			case 5:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 149; Match(NULL);
				}
				break;
			case 6:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 150; Match(TRUE);
				}
				break;
			case 7:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 151; Match(FALSE);
				}
				break;
			case 8:
				_localctx = new ValueSelfContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 152; Match(SELF);
				}
				break;
			case 9:
				_localctx = new ValueEmptyAggregateContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 153; Match(T__11);
				State = 154; Match(T__12);
				}
				break;
			case 10:
				_localctx = new ValueAggregateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 155; Match(T__11);
				State = 156; expression_list(0);
				State = 157; Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
	 
		public Expression_listContext() { }
		public virtual void CopyFrom(Expression_listContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprListAccumContext : Expression_listContext {
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprListAccumContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprListAccum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprListAccum(this);
		}
	}
	public partial class ExprListSingleContext : Expression_listContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprListSingleContext(Expression_listContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterExprListSingle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitExprListSingle(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExprListSingleContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 162; expression(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListAccumContext(new Expression_listContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 164;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 165; Match(T__13);
					State = 166; expression(0);
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NSPredicateParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INSPredicateListener typedListener = listener as INSPredicateListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(T__14);
			State = 173; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 9: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 9);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x36\xB2\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x5\x2#\n\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\a\x2+\n\x2\f\x2\xE\x2.\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3\x39\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x5\x5"+
		"\x41\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6I\n\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aW\n\a\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bp\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\a\b\x89\n\b\f\b\xE\b\x8C\v\b\x3\t\x3\t\x3\t\x3\t\x5"+
		"\t\x92\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x5\n\xA2\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\xAA\n\v\f\v"+
		"\xE\v\xAD\v\v\x3\f\x3\f\x3\f\x3\f\x2\x5\x2\xE\x14\r\x2\x4\x6\b\n\f\xE"+
		"\x10\x12\x14\x16\x2\x2\xD8\x2\"\x3\x2\x2\x2\x4\x38\x3\x2\x2\x2\x6:\x3"+
		"\x2\x2\x2\b@\x3\x2\x2\x2\nH\x3\x2\x2\x2\fV\x3\x2\x2\x2\xEo\x3\x2\x2\x2"+
		"\x10\x91\x3\x2\x2\x2\x12\xA1\x3\x2\x2\x2\x14\xA3\x3\x2\x2\x2\x16\xAE\x3"+
		"\x2\x2\x2\x18\x19\b\x2\x1\x2\x19\x1A\a\x16\x2\x2\x1A#\x5\x2\x2\x6\x1B"+
		"#\x5\x4\x3\x2\x1C#\a\x12\x2\x2\x1D#\a\x13\x2\x2\x1E\x1F\a\x3\x2\x2\x1F"+
		" \x5\x2\x2\x2 !\a\x4\x2\x2!#\x3\x2\x2\x2\"\x18\x3\x2\x2\x2\"\x1B\x3\x2"+
		"\x2\x2\"\x1C\x3\x2\x2\x2\"\x1D\x3\x2\x2\x2\"\x1E\x3\x2\x2\x2#,\x3\x2\x2"+
		"\x2$%\f\b\x2\x2%&\a\x14\x2\x2&+\x5\x2\x2\t\'(\f\a\x2\x2()\a\x15\x2\x2"+
		")+\x5\x2\x2\b*$\x3\x2\x2\x2*\'\x3\x2\x2\x2+.\x3\x2\x2\x2,*\x3\x2\x2\x2"+
		",-\x3\x2\x2\x2-\x3\x3\x2\x2\x2.,\x3\x2\x2\x2/\x39\x5\x6\x4\x2\x30\x31"+
		"\a$\x2\x2\x31\x39\x5\x6\x4\x2\x32\x33\a\'\x2\x2\x33\x39\x5\x6\x4\x2\x34"+
		"\x35\a%\x2\x2\x35\x39\x5\x6\x4\x2\x36\x37\a&\x2\x2\x37\x39\x5\x6\x4\x2"+
		"\x38/\x3\x2\x2\x2\x38\x30\x3\x2\x2\x2\x38\x32\x3\x2\x2\x2\x38\x34\x3\x2"+
		"\x2\x2\x38\x36\x3\x2\x2\x2\x39\x5\x3\x2\x2\x2:;\x5\xE\b\x2;<\x5\b\x5\x2"+
		"<=\x5\xE\b\x2=\a\x3\x2\x2\x2>\x41\a\x1D\x2\x2?\x41\x5\n\x6\x2@>\x3\x2"+
		"\x2\x2@?\x3\x2\x2\x2\x41\t\x3\x2\x2\x2\x42I\x5\f\a\x2\x43\x44\x5\f\a\x2"+
		"\x44\x45\a\x5\x2\x2\x45\x46\a\x35\x2\x2\x46G\a\x6\x2\x2GI\x3\x2\x2\x2"+
		"H\x42\x3\x2\x2\x2H\x43\x3\x2\x2\x2I\v\x3\x2\x2\x2JW\a\x17\x2\x2KW\a\x18"+
		"\x2\x2LW\a\x19\x2\x2MW\a\x1A\x2\x2NW\a\x1B\x2\x2OW\a\x1C\x2\x2PW\a\x1E"+
		"\x2\x2QW\a\x1F\x2\x2RW\a \x2\x2SW\a!\x2\x2TW\a\"\x2\x2UW\a#\x2\x2VJ\x3"+
		"\x2\x2\x2VK\x3\x2\x2\x2VL\x3\x2\x2\x2VM\x3\x2\x2\x2VN\x3\x2\x2\x2VO\x3"+
		"\x2\x2\x2VP\x3\x2\x2\x2VQ\x3\x2\x2\x2VR\x3\x2\x2\x2VS\x3\x2\x2\x2VT\x3"+
		"\x2\x2\x2VU\x3\x2\x2\x2W\r\x3\x2\x2\x2XY\b\b\x1\x2YZ\a\v\x2\x2Zp\x5\xE"+
		"\b\f[\\\x5\x16\f\x2\\]\a/\x2\x2]^\x5\xE\b\b^p\x3\x2\x2\x2_`\a\x35\x2\x2"+
		"`\x61\a\x3\x2\x2\x61p\a\x4\x2\x2\x62\x63\a\x35\x2\x2\x63\x64\a\x3\x2\x2"+
		"\x64\x65\x5\x14\v\x2\x65\x66\a\x4\x2\x2\x66p\x3\x2\x2\x2gp\a\x35\x2\x2"+
		"hi\a\f\x2\x2ip\a\x35\x2\x2jp\x5\x12\n\x2kl\a\x3\x2\x2lm\x5\xE\b\x2mn\a"+
		"\x4\x2\x2np\x3\x2\x2\x2oX\x3\x2\x2\x2o[\x3\x2\x2\x2o_\x3\x2\x2\x2o\x62"+
		"\x3\x2\x2\x2og\x3\x2\x2\x2oh\x3\x2\x2\x2oj\x3\x2\x2\x2ok\x3\x2\x2\x2p"+
		"\x8A\x3\x2\x2\x2qr\f\x11\x2\x2rs\a\a\x2\x2s\x89\x5\xE\b\x12tu\f\x10\x2"+
		"\x2uv\a\b\x2\x2v\x89\x5\xE\b\x11wx\f\xF\x2\x2xy\a\t\x2\x2y\x89\x5\xE\b"+
		"\x10z{\f\xE\x2\x2{|\a\n\x2\x2|\x89\x5\xE\b\xF}~\f\r\x2\x2~\x7F\a\v\x2"+
		"\x2\x7F\x89\x5\xE\b\xE\x80\x81\f\x5\x2\x2\x81\x82\a\r\x2\x2\x82\x89\x5"+
		"\xE\b\x6\x83\x84\f\v\x2\x2\x84\x85\a\x5\x2\x2\x85\x86\x5\x10\t\x2\x86"+
		"\x87\a\x6\x2\x2\x87\x89\x3\x2\x2\x2\x88q\x3\x2\x2\x2\x88t\x3\x2\x2\x2"+
		"\x88w\x3\x2\x2\x2\x88z\x3\x2\x2\x2\x88}\x3\x2\x2\x2\x88\x80\x3\x2\x2\x2"+
		"\x88\x83\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3"+
		"\x2\x2\x2\x8B\xF\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x92\x5\xE\b\x2\x8E"+
		"\x92\a,\x2\x2\x8F\x92\a-\x2\x2\x90\x92\a.\x2\x2\x91\x8D\x3\x2\x2\x2\x91"+
		"\x8E\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x90\x3\x2\x2\x2\x92\x11\x3\x2"+
		"\x2\x2\x93\xA2\a\x30\x2\x2\x94\xA2\a\x34\x2\x2\x95\xA2\a\x33\x2\x2\x96"+
		"\xA2\x5\x16\f\x2\x97\xA2\a(\x2\x2\x98\xA2\a)\x2\x2\x99\xA2\a*\x2\x2\x9A"+
		"\xA2\a+\x2\x2\x9B\x9C\a\xE\x2\x2\x9C\xA2\a\xF\x2\x2\x9D\x9E\a\xE\x2\x2"+
		"\x9E\x9F\x5\x14\v\x2\x9F\xA0\a\xF\x2\x2\xA0\xA2\x3\x2\x2\x2\xA1\x93\x3"+
		"\x2\x2\x2\xA1\x94\x3\x2\x2\x2\xA1\x95\x3\x2\x2\x2\xA1\x96\x3\x2\x2\x2"+
		"\xA1\x97\x3\x2\x2\x2\xA1\x98\x3\x2\x2\x2\xA1\x99\x3\x2\x2\x2\xA1\x9A\x3"+
		"\x2\x2\x2\xA1\x9B\x3\x2\x2\x2\xA1\x9D\x3\x2\x2\x2\xA2\x13\x3\x2\x2\x2"+
		"\xA3\xA4\b\v\x1\x2\xA4\xA5\x5\xE\b\x2\xA5\xAB\x3\x2\x2\x2\xA6\xA7\f\x3"+
		"\x2\x2\xA7\xA8\a\x10\x2\x2\xA8\xAA\x5\xE\b\x2\xA9\xA6\x3\x2\x2\x2\xAA"+
		"\xAD\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\x15\x3\x2"+
		"\x2\x2\xAD\xAB\x3\x2\x2\x2\xAE\xAF\a\x11\x2\x2\xAF\xB0\a\x35\x2\x2\xB0"+
		"\x17\x3\x2\x2\x2\xF\"*,\x38@HVo\x88\x8A\x91\xA1\xAB";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
